well its big and detailed code, i have smalll sample code, keep it same, just fix if theres the issueimport pandas as pdfrom sklearn.feature_extraction.text import TfidfVectorizerfrom sklearn.metrics.pairwise import cosine_similarityimport numpy as np# Load datasetdf = pd.read_csv('/content/sample_data/movie_dataset.csv')if 'genres' not in df.columns:raise ValueError("Dataset must contain a 'genres' column for content-basedfiltering.")# Fill missing valuesdf['genres'] = df['genres'].fillna('')# Convert text data to numerical representationvectorizer = TfidfVectorizer(stop_words='english')tfidf_matrix = vectorizer.fit_transform(df['genres'])# Compute similarity matrixcosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)# Display only top 5 similar movies for each movie (shortened matrix)top_similar_movies = pd.DataFrame(cosine_sim, index=df['title'],columns=df['title']).round(3)# Show top 5 similar movies for each movieprint("Top 5 Similar Movies for Each Movie:")for movie in df['title'][:5]:top_similar = top_similar_movies[movie].nlargest(6)[1:]print(f"\n{movie}:")print(top_similar)# Movie recommender function based on most popular genredef get_recommendations_based_on_genre(df, cosine_sim, top_n=5):# Count the most frequent genre(s) in the datasetgenre_counts = df['genres'].str.split('|').explode().value_counts()most_watched_genre = genre_counts.idxmax()# Filter movies with the most watched genregenre_filtered_df = df[df['genres'].str.contains(most_watched_genre, case=False,na=False)]# Compute recommendations based on similarityrecommended_movies = []for movie in genre_filtered_df['title']:# Get similarity scores for the movieidx = df[df['title'] == movie].index[0]sim_scores = list(enumerate(cosine_sim[idx]))sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:top_n+1]movie_indices = [i[0] for i in sim_scores]recommended_movies.extend(df['title'].iloc[movie_indices].tolist())return list(set(recommended_movies))[:top_n]# Function performance evaluation based on genredef evaluate_recommendation_based_on_genre(df, cosine_sim):recs = get_recommendations_based_on_genre(df, cosine_sim)if recs:print("\nTop 5 Recommended Movies from the Most Watched Genre:")for movie in recs:print(movie)else:print("No recommendations based on the most watched genre.")# Example usageevaluate_recommendation_based_on_genre(df, cosine_sim)i wanted  above code to run properly (dont add anything extra)